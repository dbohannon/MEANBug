"use strict";function e(){function e(e){return r.inspect(e,null,null)}function f(){return"Node.js Agent v"+require("../../package.json").version+"\n\tgenerated on "+(new Date).toUTCString()}function l(){let e="[Node runtime]";for(let t in process.versions)e+="\n\t-"+t+": "+process.versions[t];return e}function d(){const e="[Application package.json]",n=require.cache;for(let i in n){const s=n[i];if(null===s.parent){const n=o.join(s.filename,"..","package.json");try{const o=t.readFileSync(n);return e+"\n"+o}catch(t){return e+r.format("\nFailed to read the package.json file from %s: %j",n,t)}}}return e+"\nFailed to find the package.json file!"}function m(){let e="[Loaded modules]";const t=require.cache;for(let n in t)e+="\n\t-"+n;return e}function p(){return"[Configuration]\n"+e(v.config)}function g(){return"[Process]\n"+e(v.services.processexec.processExecData)}function h(){return"[Memory]\n\t- Total:"+n.totalmem()/1024/1024+"M\n\t- Free:"+n.freemem()/1024/1024+"M"}function y(){return"[Native Map Size]\n\t- Keys: "+u.getSize()+"\n\t- Values: "+u.getTaintedValues().size}function q(){let e=v.services.instrumentation.getWrappersStatData(),t="To activate wrappers data, set environment variable SEEKER_WRAPPER_PROFILING";return e&&(t="wrapped method, number of calls, total doBefore Time(ms), total doAfter Time(ms)\n",Object.keys(e).forEach(n=>{let o=e[n];o.count>0&&(t+=r.format("%s, %d, %d, %d\n",n,o.count,o.doBeforeTime,o.doAfterTime))})),"[Wrapper calls]\n"+t}function b(){return"[OS]\n\t- OS: "+n.type()+" "+n.release()+" ("+n.arch()+")\n\t- CPUs: "+e(n.cpus())+"\n\t- Hostname: "+n.hostname()+"\n\t- Network: "+e(n.networkInterfaces())}function E(){return new Promise((e,n)=>{try{const s=new i;s.addFile(r.format("conf/agent-%s.json",v.config.bootstrapCfg.executionUuid),Buffer.from(r.inspect(v.config,null,2)),"",420<<16);let u="";[f,p,g,l,d,m,h,y,b,q].forEach(e=>u+=e()+"\n\n"),s.addFile(r.format("summary/agent-%s.txt",v.config.bootstrapCfg.executionUuid),Buffer.from(u),"",420<<16);const E="log/agents/node",F=c.getLogDir(v);t.readdirSync(F).forEach(e=>{".log"===o.extname(e)&&s.addLocalFile(o.join(F,e),E,o.basename(e))});const C=o.join(v.config.bootstrapCfg.tempDir,r.format("agents/agent-%s/dumps/synopsys-agent-dump-%s-%s.zip",v.config.bootstrapCfg.processKey,v.config.bootstrapCfg.executionUuid,(new Date).toISOString().replace(/[^\d]/gi,"")));s.writeZip(C),a.trace("Dump file size is: "+s.toBuffer().length),e(C)}catch(e){n(e)}})}function F(e,i,c,u){return new Promise((f,l)=>{const d=v.config.bootstrapCfg;t.readFile(u,function(m,p){if(m)return a.error("Failed to upload the dump file, cause: Failed to read zip file for upload, error: %s",m),t.unlinkSync(u),void l();const g="*****"+(new Date).getTime()+"*****",h=o.basename(u),y="--",q="Content-Disposition: form-data; ",b=d.collectorHttpProtocol+"://"+d.collectorHost+":"+d.collectorPort+"/rest"+e;let E="";Object.keys(i).forEach(e=>{E+="--"+g+n.EOL+q+'name="'+e+'"'+n.EOL+n.EOL+i[e]+n.EOL}),E+="--"+g+n.EOL+q+'name="'+c+'";filename="'+h+'"'+n.EOL+n.EOL;const F=Buffer.concat([Buffer.from(E,"utf8"),Buffer.from(p,"binary"),Buffer.from(n.EOL+"--"+g+"--"+n.EOL,"utf8")]),C={method:"post",url:b,headers:{"Content-Type":"multipart/form-data; boundary="+g,"User-Agent":v.services.collector.getUserAgent(),"Content-Length":Buffer.byteLength(F)},body:F};s(C,function(e,n,o){if(t.unlinkSync(u),200===n.statusCode)f();else{const e=r.format("Failed to send file %s to %s, rc: %d, body: %s",u,b,n.statusCode,o);a.error("Failed to upload the dump file, cause: %s",e),l()}})})})}let v;this.init=function(e){(v=e).services.collector.on("DiagnosticDump.Request",e=>{a.debug("Processing a request to generate a dump file");const t="/api/system/diagnostic/agent/"+e.data.requestUuid;module.exports.generateDumpFile(e).then(e=>{F(t,{identifier:v.config.bootstrapCfg.executionUuid},"file",e)}).catch(e=>{a.error("Failed to generate the dump file, cause: %s",e)})})},this.generateDumpFile=E,this._mockRequest=function(e,t){s=e,module.exports.generateDumpFile=t},this._revertMockRequest=function(){s=require("request"),module.exports.generateDumpFile=E}}const t=require("fs"),n=require("os"),o=require("path"),r=require("util"),i=require("adm-zip");let s=require("request");const a=require("../util/logger"),c=require("../util/misc"),u=require("./../../native-tainted-map");module.exports=new e;