"use strict";const e=require("path"),n=require("fs"),t=require("log4js");let o=t.getLogger("synopsys-seeker");const i=process.env.SEEKER_LOG_FILE_SIZE||20,s=process.env.SEEKER_LOG_BACKUPS||10;let r=process.env.SEEKER_PURGE_LOGS_TIME||7;r*=864e5;const l=function(){function l(e,n){f&&f.services&&f.services.instrumentation?f.services.instrumentation.safeExecuteWithoutInstrumentation(()=>{e.apply(o,n)}):e.apply(o,n)}function c(t){n.readdir(t,function(o,i){if(o)u.info("Could not find old log files to purge");else{const o=(new Date).getTime();for(let s=0;s<i.length;++s){const l=e.join(t,i[s]);n.stat(l,(e,t)=>{e&&u.warn("Could not purge log file: "+l);t&&t.isFile()&&t.mtime.getTime()+r<o&&n.unlink(l,e=>{e&&u.warn("Could not purge log file: "+l)})})}}})}let f=null;this.init=function(n){c(n.dir),f=n.agent,u.filePath=e.join(n.dir,"agent-"+process.pid+".log"),t.configure({appenders:{console:{type:"console"},logger:{type:"dateFile",filename:this.filePath,maxLogSize:1024*i*1024,backups:s}},categories:{default:{appenders:["logger","console"],level:n.level}}}),o=t.getLogger("synopsys-seeker")},this.setLevel=function(e){e!==o.level.levelStr&&(o.level=e,u.info("Log level has been changed to "+e))},this.getLevel=function(){return o.level.levelStr},this.trace=function(){l(o.trace,arguments)},this.debug=function(){l(o.debug,arguments)},this.info=function(){l(o.info,arguments)},this.warn=function(){l(o.warn,arguments)},this.error=function(){l(o.error,arguments)},this.fatal=function(){l(o.fatal,arguments)}},u=new l;module.exports=u;