"use strict";function e(n,i){e.super_.apply(this,arguments),this.start=function e(){n.services.nosql.on(i,"command",function(e){if(e.command&&e.command.query){const r=n.services.datatainting.isTaintedRecursively(e.command.query);null!==r&&new t(i).withTaintedDefaults(r.taintedObject).withContext({jsonQuery:r.query,noSqlDb:e.noSqlDb}).submit()}})},this.isReplayable=function e(){return!0},this.getVerificationValues=function e(n){const i=n.initialFinding.getSourceValue();let t="'";return"mongo"===n.initialFinding.checkerContext.noSqlDb?(t={$seeker:"non existent operator"},[t]):[i.substr(0,i.length-1)+t]},this.getStatusForReplay=function e(n){const i=n.newFinding.getSinkValue(),t=n.newFinding.getSourceValue(),s=n.errors,u=s&&s.find(e=>{const i=n.newFinding.requestDatas.find(n=>e.uuid===n.uuid);return i&&e.error.message.includes("$seeker")});return u&&u.error&&i&&i.includes(t)?(n.initialFinding.replayData.error=u.error.toString(),r.VERIFIED):r.ELIMINATED}}const n=require("util"),i=require("./_AbstractChecker"),t=require("../services/finding-service").FindingBuilder,r=require("../entities/enums/replay-status");n.inherits(e,i),module.exports=function(n,i){return new e(n,i)};