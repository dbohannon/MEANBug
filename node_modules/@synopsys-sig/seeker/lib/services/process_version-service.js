"use strict";function e(){function e(e){const t=module.exports.isFeatureEnabled(),o=e.features.indexOf(i)>-1;module.exports.setFeatureEnabled(o);const r=t?module.exports.getProjectVersion():null;module.exports.setProjectVersionStrategyCfg(e.projectVersionStrategyCfg);const s=o?module.exports.getProjectVersion():null;(null===r?null===s:r===s)||n(r,s)}function n(e,t){s.services.collector.wsSend({command:"ProjectVersionManagement.VersionChange.Push",data:{type:"com.synopsys.unicol.commons.objects.messages.data.projectversioning.ProjectVersionManagementCommandData$PushProjectVersionChange",processExecUuid:s.config.bootstrapCfg.executionUuid,oldProjectVersion:e,newProjectVersion:t}})}function r(e){return c.getProjectVersion(e)}let s;const i="PROJECT_VERSION_MANAGEMENT",c=new t;let a=null,u=!1,f;this.init=function(e){s=e},this.start=function(){if(!u){u=!0,this.setProjectVersionStrategyCfg(s.config.processCfg.projectVersionStrategyCfg);const t=s.services.collector;t.on("ProjectCfg.Push",t=>{try{const n=t.data.projectCfg.projectEnvCfgs.default.processCfgs.default;e(n)}catch(e){o.warn("Failed to find the default process configuration from the incoming message after project settings were changed: %s",JSON.stringify(t.data.projectCfg))}}),t.on("ProjectVersionManagement.Strategy.Verify",e=>{try{const n=r(e.data.projectVersionStrategyCfg);t.wsSend({command:"ProjectVersionManagement.Version.Push",data:{type:"com.synopsys.unicol.commons.objects.messages.data.projectversioning.ProjectVersionManagementCommandData$PushProjectVersion",processExecUuid:s.config.bootstrapCfg.executionUuid,testUuid:e.data.testUuid,projectVersion:n}})}catch(t){o.warn("Failed to verify the strategy for the testUuid %s",e.data.testUuid)}})}},this.isFeatureEnabled=function(){return s.config.processCfg.features.indexOf(i)>-1},this.setFeatureEnabled=function(e){if(!0!==e||this.isFeatureEnabled()){const e=s.config.processCfg.features.indexOf(i);s.config.processCfg.features.splice(e,1)}else s.config.processCfg.features.push(i)},this.getProjectVersion=function(){return u||this.start(),a},this.setProjectVersionStrategyCfg=function(e){a=null===e?null:c.getProjectVersion(e,f)},this.cleanup=function(){u=!1},this.setJsonPath=function(e){f=e}}function t(){this.getProjectVersion=function(e,t){let n=null;if(e)if("ENVIRONMENT_VARIABLE"===e.versionStrategy)n=process.env[e.environmentVariable];else if("NODE_PACKAGE"===e.versionStrategy)try{n=require.main.require(t||"./package.json").version}catch(e){o.warn("Unexpected error trying to extract the project version from the package.json file",e)}else if("CUSTOM"===e.versionStrategy)if("NODEJS"===e.technology){const t=e.componentPath;try{const e=require.main.require(t);n=e.getAppVersion()}catch(e){o.warn("Unexpected error trying to extract the project version from the module %s",t,e)}}else o.info("The Custom strategy has been selected, but it is not configured for Node.js");return n}}const o=require("../util/logger");module.exports=new e;